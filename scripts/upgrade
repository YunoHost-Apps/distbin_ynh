#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_print_info --message="Loading installation settings..."

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get --app=$app --key=domain)
path_url=$(ynh_app_setting_get --app=$app --key=path)
is_public=$(ynh_app_setting_get --app=$app --key=is_public)
final_path=$(ynh_app_setting_get --app=$app --key=final_path)
port=$(ynh_app_setting_get --app=$app --key=port)

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_print_info --message="Ensuring downward compatibility..."

# Fix is_public as a boolean value
if [ "$is_public" = "Yes" ]; then
	ynh_app_setting_set --app=$app --key=is_public --value=1
	is_public=1
elif [ "$is_public" = "No" ]; then
	ynh_app_setting_set --app=$app --key=is_public --value=0
	is_public=0
fi

# If final_path doesn't exist, create it
if [ -z $final_path ]; then
	final_path=/var/www/$app
	ynh_app_setting_set --app=$app --key=final_path --value=$final_path
fi

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_print_info --message="Backing up the app before upgrading (may take a while)..."

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# restore it if the upgrade fails
	ynh_restore_upgradebackup
	ynh_clean_check_starting
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# STOP SERVICE
#=================================================

ynh_systemd_action --action=stop --service_name=$app

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_print_info --message="Upgrading source files..."

# Download, check integrity, uncompress and patch the source from app.src#
ynh_setup_source --dest_dir="$final_path"

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_print_info --message="Upgrading nginx web server configuration..."

# Create a dedicated nginx config
ynh_add_nginx_config

#=================================================
# UPGRADE DEPENDENCIES
#=================================================
ynh_print_info --message="Upgrading dependencies..."

ynh_install_app_dependencies $pkg_dependencies
ynh_remove_nodejs
ynh_install_nodejs 10

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_print_info --message="Making sure dedicated system user exists..."

# Create a dedicated user (if not existing)
ynh_system_user_create --username=$app --home_dir=$final_path

#=================================================
# SPECIFIC UPGRADE
#=================================================
# CREATE STORAGE FOLDER
#=================================================

DIRECTORY="$final_path/db"
#Move old db
if [ -d "$DIRECTORY" ]; then
    mv "$final_path/db" "$final_path/distbin-db"
fi

#=================================================
# MAKE INSTALL
#=================================================

chown -R "$app":"$app" "$final_path"
pushd $final_path
    ynh_use_nodejs
    sudo -u $app env PATH=$PATH npm install --ignore-scripts
    sudo -u $app env PATH=$PATH npm run build
	cp package* dist/ 
popd

pushd $final_path/dist
    sudo -u $app env PATH=$PATH npm install --ignore-scripts  --production
popd

#=================================================
# MODIFY A CONFIG FILE
#=================================================

cp "../conf/.env" "$final_path/.env"

if [ "$path_url" == "/" ]
then
    domain_uri="$domain"
else
    domain_uri="$domain$path_url"
fi

ynh_replace_string --match_string="__NODEJS_PATH__" --replace_string="$nodejs_path" --target_file="$final_path/.env"
ynh_replace_string --match_string="__PORT__" --replace_string="$port" --target_file="$final_path/.env"
ynh_replace_string --match_string="__DOMAIN_URI__" --replace_string="$domain_uri" --target_file="$final_path/.env"
ynh_replace_string --match_string="__FINALPATH__" --replace_string="$final_path" --target_file="$final_path/.env"

ynh_backup_if_checksum_is_different --file="$final_path/.env"
# Recalculate and store the checksum of the file for the next upgrade.
ynh_store_file_checksum --file="$final_path/.env"

#=================================================
# SETUP LOGROTATE
#=================================================
ynh_print_info --message="Upgrading logrotate configuration..."

# Use logrotate to manage app-specific logfile(s)
ynh_use_logrotate --non-append

#=================================================
# SETUP SYSTEMD
#=================================================
ynh_print_info --message="Upgrading systemd configuration..."

# Create a dedicated systemd config
ynh_add_systemd_config

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

# Set permissions on app files
chown -R $app:$app $final_path

#=================================================
# CREATE LOG FOLDER
#=================================================

mkdir -p "/var/log/$app"
chown -R "$app":"$app" "/var/log/$app"

#=================================================
# SETUP SSOWAT
#=================================================
ynh_print_info --message="Upgrading SSOwat configuration..."

# Make app public if necessary
if [ $is_public -eq 1 ]
then
	# unprotected_uris allows SSO credentials to be passed anyway
	ynh_app_setting_set --app=$app --key=unprotected_uris --value="/"
fi

#=================================================
# RELOAD NGINX
#=================================================
ynh_print_info --message="Reloading nginx web server..."

systemctl reload nginx

#=================================================
# START SERVICE
#=================================================

ynh_systemd_action --action=start --service_name=$app --log_path=systemd --line_match="Started Distbin Service"
sleep 10

#=================================================
# END OF SCRIPT
#=================================================

ynh_print_info --message="Upgrade of $app completed"
