#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source ynh_systemd_action
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_print_info "Load settings"

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get $app domain)
path_url=$(ynh_app_setting_get $app path)
#admin=$(ynh_app_setting_get $app admin)
is_public=$(ynh_app_setting_get $app is_public)
final_path=$(ynh_app_setting_get $app final_path)
#language=$(ynh_app_setting_get $app language)
#db_name=$(ynh_app_setting_get $app db_name)
port=$(ynh_app_setting_get $app port)

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_print_info "Ensure downward compatibility"

# Fix is_public as a boolean value
if [ "$is_public" = "Yes" ]; then
	ynh_app_setting_set $app is_public 1
	is_public=1
elif [ "$is_public" = "No" ]; then
	ynh_app_setting_set $app is_public 0
	is_public=0
fi

# If db_name doesn't exist, create it
#if [ -z $db_name ]; then
#	db_name=$(ynh_sanitize_dbid $app)
#	ynh_app_setting_set $app db_name $db_name
#fi

# If final_path doesn't exist, create it
if [ -z $final_path ]; then
	final_path=/var/www/$app
	ynh_app_setting_set $app final_path $final_path
fi

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_print_info "Backup the app before upgrading"

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# restore it if the upgrade fails
	ynh_restore_upgradebackup
	ynh_clean_check_starting
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# CHECK THE PATH
#=================================================

# Normalize the URL path syntax
path_url=$(ynh_normalize_url_path $path_url)

#=================================================
# STOP SERVICE
#=================================================

ynh_systemd_action --action=stop --service_name=$app

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_print_info "Download, check and unpack source"

# Download, check integrity, uncompress and patch the source from app.src#
#ynh_setup_source "$final_path"

pushd $final_path
    git reset --hard
    git pull --quiet
popd 

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_print_info "Reconfigure nginx"

# Create a dedicated nginx config
ynh_add_nginx_config

#=================================================
# UPGRADE DEPENDENCIES
#=================================================
ynh_print_info "Upgrade dependencies"

ynh_install_app_dependencies ca-certificates
ynh_install_nodejs 8

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_print_info "Create a dedicated user"

# Create a dedicated user (if not existing)
ynh_system_user_create "$app" "$final_path"

#=================================================
# PHP-FPM CONFIGURATION
#=================================================
ynh_print_info "Reconfigure php-fpm"

# Create a dedicated php-fpm config
#ynh_add_fpm_config

#=================================================
# SPECIFIC UPGRADE
#=================================================
# CREATE DB FOLDER
#=================================================

DIRECTORY="$final_path/db"
#Move old db
if [ -d "$DIRECTORY" ]; then
    mv "$final_path/db" "$final_path/distbin-db"
fi

#=================================================
# MAKE INSTALL
#=================================================

chown -R "$app":"$app" "$final_path"
pushd $final_path
    ynh_use_nodejs
    sudo -u $app env PATH=$PATH npm install --ignore-scripts
    sudo -u $app env PATH=$PATH npm run build
	cp package* dist/ 
popd

pushd $final_path/dist
    sudo -u $app env PATH=$PATH npm install --ignore-scripts  --production
popd

#=================================================
# MODIFY A CONFIG FILE
#=================================================

### `ynh_replace_string` is used to replace a string in a file.
### (It's compatible with sed regular expressions syntax)

cp "../conf/.env" "$final_path/.env"

ynh_replace_string "__NODEJS_PATH__" "$nodejs_path" "$final_path/.env"
ynh_replace_string "__PORT__" "$port" "$final_path/.env"
ynh_replace_string "__DOMAIN_URI__" "$domain$path_url" "$final_path/.env"
ynh_replace_string "__FINALPATH__" "$final_path" "$final_path/.env"

### Verify the checksum of a file, stored by `ynh_store_file_checksum` in the install script.
### And create a backup of this file if the checksum is different. So the file will be backed up if the admin had modified it.
ynh_backup_if_checksum_is_different "$final_path/.env"
# Recalculate and store the checksum of the file for the next upgrade.
ynh_store_file_checksum "$final_path/.env"

#=================================================
# SETUP LOGROTATE
#=================================================
ynh_print_info "Reconfigure logrotate"

# Use logrotate to manage app-specific logfile(s)
ynh_use_logrotate --non-append

#=================================================
# SETUP SYSTEMD
#=================================================
ynh_print_info "Reconfigure systemd"

# Create a dedicated systemd config
ynh_add_systemd_config

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

# Set permissions on app files
#chown -R root: $final_path
chown -R $app:$app $final_path

mkdir -p /var/log/$app
chown -R $app:$app /var/log/$app

#=================================================
# SETUP SSOWAT
#=================================================
ynh_print_info "Reconfigure SSOwat"

# Make app public if necessary
if [ $is_public -eq 1 ]
then
	# unprotected_uris allows SSO credentials to be passed anyway
	ynh_app_setting_set $app unprotected_uris "/"
fi

#=================================================
# RELOAD NGINX
#=================================================
ynh_print_info "Reload nginx"

systemctl reload nginx

#=================================================
# START SERVICE
#=================================================

ynh_systemd_action --action=start --service_name=$app --line_match="http://localhost:"

#=================================================
# END OF SCRIPT
#=================================================

ynh_print_info "Upgrade completed"
